/**
 * Copyright 2010, Renaud Delbru
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * @project siren
 * @author Renaud Delbru [ 21 Jan 2011 ]
 * @link http://renaud.delbru.fr/
 * @copyright Copyright (C) 2010 by Renaud Delbru, All rights reserved.
 */
package org.sindice.siren.qparser.keyword.query;

import org.apache.lucene.queryParser.core.config.QueryConfigHandler;
import org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor;
import org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline;
import org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor;
import org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder;
import org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler;
import org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser;
import org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor;
import org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor;
import org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor;
import org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline;
import org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor;
import org.apache.lucene.search.Query;
import org.sindice.siren.qparser.keyword.query.processors.AllowFuzzyAndWildcardProcessor;
import org.sindice.siren.qparser.keyword.query.processors.AnalyzerQueryNodeProcessor;
import org.sindice.siren.qparser.keyword.query.processors.ChangeDefaultOperatorNodeProcessor;
import org.sindice.siren.qparser.keyword.query.processors.GroupQueryNodeProcessor;
import org.sindice.siren.qparser.keyword.query.processors.MultiFieldQueryNodeProcessor;

/**
 * This pipeline has all the processors needed to process a query node tree,
 * generated by {@link StandardSyntaxParser}, already assembled. <br/>
 * <br/>
 * The order they are assembled affects the results. <br/>
 * <br/>
 * This processor pipeline was designed to work with
 * {@link StandardQueryConfigHandler}. <br/>
 * <br/>
 * The result query node tree can be used to build a {@link Query} object using
 * {@link StandardQueryTreeBuilder}. <br/>
 * <br/>
 * This is a modification of the original
 * {@link StandardQueryNodeProcessorPipeline} which adds a
 * {@link ChangeDefaultOperatorNodeProcessor} in order to correctly support
 * unary operators (SRN-106) <br/>
 *
 * @see StandardQueryTreeBuilder
 * @see StandardQueryConfigHandler
 * @see StandardSyntaxParser
 */
public class KeywordQueryNodeProcessorPipeline
extends QueryNodeProcessorPipeline {

  public KeywordQueryNodeProcessorPipeline(final QueryConfigHandler queryConfig) {
    super(queryConfig);

//    this.add(new AddDefaultModifierNodeProcessor());
    this.add(new ChangeDefaultOperatorNodeProcessor());
    this.add(new WildcardQueryNodeProcessor());
    this.add(new MultiFieldQueryNodeProcessor());
    this.add(new FuzzyQueryNodeProcessor());
    this.add(new MatchAllDocsQueryNodeProcessor());
    this.add(new LowercaseExpandedTermsQueryNodeProcessor());
    this.add(new ParametricRangeQueryNodeProcessor());
    this.add(new AllowFuzzyAndWildcardProcessor());
    this.add(new AllowLeadingWildcardProcessor());
    this.add(new AnalyzerQueryNodeProcessor());
    this.add(new PhraseSlopQueryNodeProcessor());
    this.add(new GroupQueryNodeProcessor());
    this.add(new NoChildOptimizationQueryNodeProcessor());
    this.add(new RemoveDeletedQueryNodesProcessor());
    this.add(new RemoveEmptyNonLeafQueryNodeProcessor());
    this.add(new BooleanSingleChildOptimizationQueryNodeProcessor());
    this.add(new DefaultPhraseSlopQueryNodeProcessor());
    this.add(new BoostQueryNodeProcessor());
    this.add(new MultiTermRewriteMethodProcessor());
  }

}